package fun.wxy.annoy_o_tron.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fun.wxy.annoy_o_tron.dao.ShipHeader;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHIP_HEADER".
*/
public class ShipHeaderDao extends AbstractDao<ShipHeader, Long> {

    public static final String TABLENAME = "SHIP_HEADER";

    /**
     * Properties of entity ShipHeader.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ship_date = new Property(1, String.class, "ship_date", false, "SHIP_DATE");
        public final static Property Created_date = new Property(2, java.util.Date.class, "created_date", false, "CREATED_DATE");
    };


    public ShipHeaderDao(DaoConfig config) {
        super(config);
    }
    
    public ShipHeaderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHIP_HEADER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHIP_DATE\" TEXT NOT NULL ," + // 1: ship_date
                "\"CREATED_DATE\" INTEGER NOT NULL );"); // 2: created_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHIP_HEADER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShipHeader entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getShip_date());
        stmt.bindLong(3, entity.getCreated_date().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShipHeader readEntity(Cursor cursor, int offset) {
        ShipHeader entity = new ShipHeader( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // ship_date
            new java.util.Date(cursor.getLong(offset + 2)) // created_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShipHeader entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShip_date(cursor.getString(offset + 1));
        entity.setCreated_date(new java.util.Date(cursor.getLong(offset + 2)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShipHeader entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShipHeader entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
