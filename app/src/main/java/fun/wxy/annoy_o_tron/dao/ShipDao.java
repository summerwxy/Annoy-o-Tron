package fun.wxy.annoy_o_tron.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fun.wxy.annoy_o_tron.dao.Ship;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHIP".
*/
public class ShipDao extends AbstractDao<Ship, Long> {

    public static final String TABLENAME = "SHIP";

    /**
     * Properties of entity Ship.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ship_date = new Property(1, String.class, "ship_date", false, "SHIP_DATE");
        public final static Property Store_name = new Property(2, String.class, "store_name", false, "STORE_NAME");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Item_no = new Property(4, String.class, "item_no", false, "ITEM_NO");
        public final static Property Item_name = new Property(5, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Order_qty = new Property(6, int.class, "order_qty", false, "ORDER_QTY");
        public final static Property Ship_qty = new Property(7, int.class, "ship_qty", false, "SHIP_QTY");
        public final static Property Order_type = new Property(8, String.class, "order_type", false, "ORDER_TYPE");
        public final static Property Price = new Property(9, double.class, "price", false, "PRICE");
        public final static Property Ship_no = new Property(10, String.class, "ship_no", false, "SHIP_NO");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
    };


    public ShipDao(DaoConfig config) {
        super(config);
    }
    
    public ShipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHIP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHIP_DATE\" TEXT NOT NULL ," + // 1: ship_date
                "\"STORE_NAME\" TEXT NOT NULL ," + // 2: store_name
                "\"CATEGORY\" TEXT NOT NULL ," + // 3: category
                "\"ITEM_NO\" TEXT NOT NULL ," + // 4: item_no
                "\"ITEM_NAME\" TEXT NOT NULL ," + // 5: item_name
                "\"ORDER_QTY\" INTEGER NOT NULL ," + // 6: order_qty
                "\"SHIP_QTY\" INTEGER NOT NULL ," + // 7: ship_qty
                "\"ORDER_TYPE\" TEXT NOT NULL ," + // 8: order_type
                "\"PRICE\" REAL NOT NULL ," + // 9: price
                "\"SHIP_NO\" TEXT," + // 10: ship_no
                "\"STATUS\" TEXT NOT NULL );"); // 11: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHIP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ship entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getShip_date());
        stmt.bindString(3, entity.getStore_name());
        stmt.bindString(4, entity.getCategory());
        stmt.bindString(5, entity.getItem_no());
        stmt.bindString(6, entity.getItem_name());
        stmt.bindLong(7, entity.getOrder_qty());
        stmt.bindLong(8, entity.getShip_qty());
        stmt.bindString(9, entity.getOrder_type());
        stmt.bindDouble(10, entity.getPrice());
 
        String ship_no = entity.getShip_no();
        if (ship_no != null) {
            stmt.bindString(11, ship_no);
        }
        stmt.bindString(12, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ship readEntity(Cursor cursor, int offset) {
        Ship entity = new Ship( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // ship_date
            cursor.getString(offset + 2), // store_name
            cursor.getString(offset + 3), // category
            cursor.getString(offset + 4), // item_no
            cursor.getString(offset + 5), // item_name
            cursor.getInt(offset + 6), // order_qty
            cursor.getInt(offset + 7), // ship_qty
            cursor.getString(offset + 8), // order_type
            cursor.getDouble(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ship_no
            cursor.getString(offset + 11) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ship entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShip_date(cursor.getString(offset + 1));
        entity.setStore_name(cursor.getString(offset + 2));
        entity.setCategory(cursor.getString(offset + 3));
        entity.setItem_no(cursor.getString(offset + 4));
        entity.setItem_name(cursor.getString(offset + 5));
        entity.setOrder_qty(cursor.getInt(offset + 6));
        entity.setShip_qty(cursor.getInt(offset + 7));
        entity.setOrder_type(cursor.getString(offset + 8));
        entity.setPrice(cursor.getDouble(offset + 9));
        entity.setShip_no(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ship entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ship entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
